From f7dd6b637daeff95a4b6a5f94f1eab599ef3b089 Mon Sep 17 00:00:00 2001
From: Pau Ruiz Safont <pau.safont@citrix.com>
Date: Thu, 21 Jan 2021 08:47:35 +0000
Subject: [PATCH 3/3] pk/rsa: use correct invariant when checking parameter d

The previous invariant didn't apply the modulus to d, which made it fail
on some valid keys.

Signed-off-by: Pau Ruiz Safont <pau.safont@citrix.com>

cherry-pick of 60c6110473119db7deea0d016bd618c71ffbbb16
---
 pk/rsa.ml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/pk/rsa.ml b/pk/rsa.ml
index 8ac005c..cf8705e 100644
--- a/pk/rsa.ml
+++ b/pk/rsa.ml
@@ -86,8 +86,8 @@ let priv ~e ~d ~n ~p ~q ~dp ~dq ~q' =
   guard Z.(dq = d mod (pred q)) (`Msg "dq <> d mod (q - 1)") >>= fun () ->
   (* e has been checked (valid_e) to be coprime to p-1 and q-1 ->
      muliplicative inverse exists *)
-  guard Z.(d = invert e (lcm (pred p) (pred q)))
-    (`Msg "d <> e ^ -1 mod lcm (p - 1) (q - 1)") >>= fun () ->
+  guard Z.(one = d * e mod (lcm (pred p) (pred q)))
+    (`Msg "1 <> d * e mod lcm (p - 1) (q - 1)") >>= fun () ->
   Ok { e ; d ; n ; p ; q ; dp ; dq ; q' }
 
 let priv_of_sexp s =
-- 
2.29.2

