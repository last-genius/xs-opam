From f1292e1ddb65d4ff22a7d438bd18c258d748c1a4 Mon Sep 17 00:00:00 2001
From: Hannes Mehnert <hannes@mehnert.org>
Date: Wed, 20 Jan 2021 11:27:11 +0100
Subject: [PATCH 1/3] Fix computation of d = e^-1 mod lam n, with lam = lcm (p
 - 1) (q - 1)

Spotted by @psafont

This is an alternate fix for #62, and adheres to RFC 8017 and NIST.
Added private key from #62 as regression.

See https://crypto.stackexchange.com/questions/29591/lcm-versus-phi-in-rsa

cherry-pick of 46e6217ac33525f5b019f0f1fc229241f9b03328
---
 pk/rsa.ml         |  6 +++---
 tests/test_rsa.ml | 15 ++++++++++++++-
 2 files changed, 17 insertions(+), 4 deletions(-)

diff --git a/pk/rsa.ml b/pk/rsa.ml
index 6e9c77f..8ac005c 100644
--- a/pk/rsa.ml
+++ b/pk/rsa.ml
@@ -86,8 +86,8 @@ let priv ~e ~d ~n ~p ~q ~dp ~dq ~q' =
   guard Z.(dq = d mod (pred q)) (`Msg "dq <> d mod (q - 1)") >>= fun () ->
   (* e has been checked (valid_e) to be coprime to p-1 and q-1 ->
      muliplicative inverse exists *)
-  guard Z.(d = invert e (pred p * pred q))
-    (`Msg "d <> e ^ -1 mod (p - 1) * (q - 1)") >>= fun () ->
+  guard Z.(d = invert e (lcm (pred p) (pred q)))
+    (`Msg "d <> e ^ -1 mod lcm (p - 1) (q - 1)") >>= fun () ->
   Ok { e ; d ; n ; p ; q ; dp ; dq ; q' }
 
 let priv_of_sexp s =
@@ -104,7 +104,7 @@ let priv_of_primes ~e ~p ~q =
   let n  = Z.(p * q) in
   pub ~e ~n >>= fun _pub ->
   (* valid_e checks e coprime to p-1 and q-1, a multiplicative inverse exists *)
-  let d = Z.(invert e (pred p * pred q)) in
+  let d = Z.(invert e (lcm (pred p) (pred q))) in
   let dp = Z.(d mod (pred p))
   and dq = Z.(d mod (pred q))
   in
diff --git a/tests/test_rsa.ml b/tests/test_rsa.ml
index c874cf6..2e7b940 100644
--- a/tests/test_rsa.ml
+++ b/tests/test_rsa.ml
@@ -31,6 +31,18 @@ let rsa_priv_of_primes_regression _ =
   | Error _ -> () (* expected since there's no multiplicative inverse of e with p and q (e is not coprime to q-1) *)
   | Ok _ -> assert_failure "expected an error"
 
+let rsa_priv_of_primes_regression_62 _ =
+  (* reported in https://github.com/mirage/mirage-crypto/issues/62 *)
+  let e = Z.of_string "65537"
+  and d = Z.of_string "3108431922676000487023821479912741349223115124336455693119108686758268939583975029271734799300422643496417197940166373626629291080744953934921341465364968117931378406446980227029856589807773725566867068344285160902403880508627911649654611750749193657211787605701986962527879646827816649512856008836705430283000626732452720870471763615388887743731833942366593788032394353874580439986226556671690116837426402890882760501726581078126288439928304880443426230837881572485961139412262011517513033934716366580117961709814170065275361576176352257579474519828879342959023237100172806323217608845596279839036960301580039126471"
+  and p = Z.of_string "153903575880038685371306078431309624429262243098160628077155385424784731704538502041682563231842507936315834999272165353754081206847521073697105321898935865522941018859502063500927758809727634595752231111149172755709224739427971151799944749671230555614514021717987321482212474581192462617805386071920647746527"
+  and q = Z.of_string "147755586168842154977618773600930512327712333912540690382962931855233965897097814139102488669702400832893695675498969512696944576662243412004204531041931249551207758395795244675585651830739018019197553505240463928167645984560980989768623533294470387237934457819888352229242173694504296968786124698140038767907"
+  in
+  match Rsa.priv_of_primes ~e ~p ~q with
+  | exception _ -> assert_failure "expected ok"
+  | Error _ -> assert_failure "expected ok"
+  | Ok priv -> assert_equal ~msg:"d is equal" d priv.Rsa.d
+
 let rsa_selftest ~bits n =
   "selftest" >:: times ~n @@ fun _ ->
     let msg =
@@ -249,6 +261,7 @@ let suite = [
   ] ;
 
   "RSA-regression" >::: [
-    test_case rsa_priv_of_primes_regression
+    test_case rsa_priv_of_primes_regression ;
+    test_case rsa_priv_of_primes_regression_62 ;
   ] ;
 ]
-- 
2.29.2

